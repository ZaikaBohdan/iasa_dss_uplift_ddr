from functions import *


if 'show_corr_map' not in st.session_state:
	clean_vars()

st.set_page_config(
    page_title='DSS for Uplift Modeling with DDR method',
    page_icon='üéì',
    layout='wide'
)

# st.write(st.session_state)
st.write("# Decision Support System for Uplift Modeling with Dependent Data Representation method")
st.write('## 1. –û–≥–ª—è–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö')

with st.sidebar:
    st.write('# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö')
    st.write('## 1.1. –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Ä–æ–∑–±–∏—Ç—Ç—è –¥–∞–Ω–∏—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ')
    train_test_options = [
        '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —Ä–æ–∑–±–∏—Ç–∏ —ó—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ',
        '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–≤–∞ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª–∏ –∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–º–∏ —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ'
    ]
    split_method = st.radio('C–ø–æ—Å—ñ–± —Ä–æ–∑–±–∏—Ç—Ç—è –¥–∞–Ω–∏—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ', options=train_test_options, index=None)

if split_method == '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —Ä–æ–∑–±–∏—Ç–∏ —ó—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ':
    with st.sidebar:
        st.write('## 1.2. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏')
        data_file = st.file_uploader("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏", type=["xlsx", "csv", "parquet"])
        train_file, test_file = None, None

    if data_file is not None:
        data = file_to_df(data_file)
        st.write('–†–æ–∑–º—ñ—Ä –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', data.shape)
        with st.sidebar:
            st.write('## 1.3. –í–∏–±–µ—Ä—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è –¥–∞–Ω–∏—Ö')
            split_rand_seed = st.number_input('–°—ñ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è –¥–∞–Ω–∏—Ö', min_value=1, value=42)
            split_test_size = st.number_input('–í—ñ–¥—Å–æ—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö', min_value=0, max_value=100, value=20) / 100
        data_train, data_test = train_test_split(data, test_size=split_test_size, random_state=split_rand_seed)

if split_method == '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–≤–∞ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª–∏ –∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–º–∏ —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ':
    with st.sidebar:
        st.header('1.2. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –∑ –¥–∞–Ω–∏–º–∏')
        data_file = None
        train_file = st.file_uploader("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏", type=["xlsx", "csv", "parquet"])
        test_file = st.file_uploader("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏", type=["xlsx", "csv", "parquet"])
 
    if train_file is not None and test_file is not None:
        data_train = file_to_df(train_file) 
        data_test = file_to_df(test_file) 

if split_method is not None:
    if data_file is not None or (train_file is not None and test_file is not None):
        c1, c2 = st.columns(2) 
        with c1:
            st.write('### –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ')
            data_info(data_train)
        with c2:
            st.write('### –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ')
            data_info(data_test)
        st.divider()

        
        st.write('## 2. –ö–æ–µ—Ñ—ñ—Ü—ñ–µ–Ω—Ç–∏ —Ä–∞–Ω–≥–æ–≤–æ—ó –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –°–ø—ñ—Ä–º–µ–Ω–∞ –≤ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö')
        with st.sidebar:
            st.divider()
            st.write('# 2. –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö')
            st.write('## 2.1. –í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ –æ–∑–Ω–∞–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å:')
            id_col = st.selectbox('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', list(data_train.columns), index=None)
            
            if id_col is not None:
                treatment_col = st.selectbox('–û–∑–Ω–∞–∫–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó', list(data_train.drop(columns=[id_col]).columns), index=None)
                if treatment_col is not None:
                    response_col = st.selectbox('–û–∑–Ω–∞–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –¥—ñ—ó', list(data_train.drop(columns=[id_col, treatment_col]).columns), index=None)
            
        if id_col is not None and treatment_col is not None and response_col is not None:
            with st.sidebar:
                st.write('## 2.2. –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∑–Ω–∞–∫ —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ')
                del_required = st.checkbox('–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∑–Ω–∞–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ')
                if del_required:
                    ban_cols = st.multiselect('–û–∑–Ω–∞–∫–∏ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', list(data_train.drop(columns=[id_col, treatment_col, response_col]).columns))
                    # ban_cols = st.multiselect('–û–∑–Ω–∞–∫–∏ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', list(data_train.drop(columns=[id_col, treatment_col, response_col]).columns),
                    #         default = ['X_21', 'X_25', 'X_45', 'X_43', 'X_29', 'X_1', 'X_11', 'X_42', 'X_22', 'X_2', 'X_8', 'X_15', 'X_10', 'X_3', 'X_17']
                    #     )
                else:
                    ban_cols = []
                
                generate_corr_map_clicked = st.button('–í–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ —Ç–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é')

            
            cols = list(data_train.drop(columns=[id_col, treatment_col]+ban_cols).columns)
            if generate_corr_map_clicked:
                with st.spinner('–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –≤ –ø—Ä–æ—Ü–µ—Å—ñ...'):
                    st.session_state.show_corr_map = True
                    corr_comp = data_train[cols].corr(method='spearman')[response_col].reset_index().merge(
                            data_train.loc[data_train[treatment_col]==0, cols].astype(float).corr(method='spearman')[response_col].reset_index(), on='index', suffixes=('', '_treatment')
                        ).merge(
                            data_train.loc[data_train[treatment_col]==1, cols].astype(float).corr(method='spearman')[response_col].reset_index(), on='index', suffixes=('', '_control')
                        ).sort_values(by=response_col, ascending=False, key = lambda x: abs(x)).round(4).set_index('index').iloc[1:].T
                    st.session_state.corr_response = corr_comp
                    st.session_state.corr_map = corr_heatmap(data_train[cols])
            
            if st.session_state.show_corr_map:
                st.write('### –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è')
                st.plotly_chart(st.session_state.corr_map, theme=None)
                st.write('### –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ —Ü—ñ–ª—å–æ–≤–æ—é –∑–º—ñ–Ω–Ω–æ—é')
                st.write('*(–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –º–æ–¥—É–ª—é –∑–Ω–∞—á–µ–Ω–Ω—è)*')
                st.write(st.session_state.corr_response)
                st.divider()


                st.write('## 3. –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ')
                X_train, y_train, t_train = get_x_y_t(data_train.drop(columns=ban_cols), id_col, response_col, treatment_col)
                X_test, y_test, t_test = get_x_y_t(data_test.drop(columns=ban_cols), id_col, response_col, treatment_col)
                with st.sidebar:
                    st.divider()
                    st.write('# 3. –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ')
                    st.write('## 3.1. –ì—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ')
                    model_rand_seed = st.number_input('–°—ñ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ', min_value=1, value=42)
                    model_ddr_feature = st.selectbox('–ì—Ä—É–ø–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–¥–µ–ª—ñ —è–∫–æ—ó –±—É–¥—É—Ç—å –æ–∑–Ω–∞–∫–æ—é –¥–ª—è –º–æ–¥–µ–ª—ñ —ñ–Ω—à–æ—ó –≥—Ä—É–ø–∏', ['treatment', 'control'])
                    train_model_clicked = st.button('–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')

                
                if train_model_clicked:
                    with st.spinner('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...'):
                        st.session_state.last_model = TwoModelsDDR(
                            classifier_trmt=XGBClassifier(random_state=model_rand_seed), 
                            classifier_ctrl=XGBClassifier(random_state=model_rand_seed),
                            ddr_feature=model_ddr_feature
                        )
                        st.session_state.last_model.fit(X_train, y_train, t_train)
                        st.session_state.last_model_uplift = st.session_state.last_model.predict(X_test)

                if st.session_state.last_model is not None:
                    st.success('–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–æ. –£ –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞ –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ.', icon="‚úÖ")
                    with st.sidebar:
                        st.write('## 3.2. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ')
                        st.write('### 3.2.1. Uplift by percentile')
                        split_test_size = st.number_input('N –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ "Uplift at top N%"', min_value=0, max_value=100, value=30) / 100
                        ubp_type = st.radio('–°–ø–æ—Å—ñ–± –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è "Uplift by percentile"', options=['barchart', 'table'])
                        st.write('### 3.2.2. Qini –∫—Ä–∏–≤–∞')
                        qini_x_type = st.radio('–í—ñ—Å—å –• –≤ –≥—Ä–∞—Ñ—ñ–∫—É Qini –∫—Ä–∏–≤–æ—ó', options=['Percent of users', 'Number of users']) == 'Percent of users'
                        perfect_qini_required = st.checkbox('–í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ Qini –∫—Ä–∏–≤—É —ñ–¥–µ–∞–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ')
                    c31, c32 = st.columns(2) 
                    with c31:
                        st.pyplot(plot_uplift_by_percentile_barchart(t_test, y_test, st.session_state.last_model_uplift, top_perc=split_test_size))
                    with c32:
                        st.pyplot(plot_qini_curve(t_test, y_test, st.session_state.last_model_uplift, normalize_n=qini_x_type, plot_perfect=perfect_qini_required))
                    st.divider()
                
                    st.write('## 4. –û—Ü—ñ–Ω–∫–∞ –≤–ø–ª–∏–≤—É –∞–∫—Ü—ñ—ó –Ω–∞ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
                    with st.sidebar:
                        st.write('# 4. –û—Ü—ñ–Ω–∫–∞ –≤–ø–ª–∏–≤—É –∞–∫—Ü—ñ—ó –Ω–∞ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
                        st.write('## 4.1. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏')
                        new_users_file = st.file_uploader("–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", type=["xlsx", "csv", "parquet"])

                    if new_users_file is not None:
                        new_users = file_to_df(new_users_file) 
                        st.write('### –û–≥–ª—è–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö')
                        st.write(new_users)
                        with st.spinner('–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–æ–∫ –≤–ø–ª–∏–≤—É –∞–∫—Ü—ñ—ó –≤ –ø—Ä–æ—Ü–µ—Å—ñ...'):
                            X_new_users = new_users.drop(columns=ban_cols+[id_col])
                            uplift_new_users = st.session_state.last_model.predict(X_new_users)
                            uplift_new_users = pd.concat([new_users[id_col], pd.Series(uplift_new_users, name='predicted_uplift')], axis=1)
                        st.write('### –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ–ª—ñ')
                        info_msg('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ–ª—ñ –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞.')
                        st.write(uplift_new_users)
                        with st.sidebar:
                            st.write('## 4.2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤')
                            st.download_button(
                                label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ .csv —Ñ–æ—Ä–º–∞—Ç—ñ",
                                data=uplift_new_users.to_csv(),
                                file_name='large_df.csv',
                                mime='text/csv',
                            )


                    else:
                        info_msg('–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞.')


                else:
                    info_msg('–ü—ñ—Å–ª—è –≤–Ω–µ—Å–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω –≤ –¥–∞–Ω—ñ, –æ–±–µ—Ä—ñ—Ç—å –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞.')
                    clean_model_vars()

            
            else:
                info_msg('–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–π–≤—ñ –æ–∑–Ω–∞–∫–∏ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (—è–∫—â–æ —Ç–∞–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ) —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ —Ç–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é", —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –æ–∑–Ω–∞–∫–∏ —Ç–∞ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏.')
                clean_vars()

        else:
            info_msg('–í–∏–±–µ—Ä—ñ—Ç—å –æ–∑–Ω–∞–∫–∏, —è–∫—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–∑–Ω–∞–∫—É –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –æ–∑–Ω–∞–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –¥—ñ—ó, —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.')
            clean_vars()

    else:
        info_msg('–í–∏–±–µ—Ä—ñ—Ç—å –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –¥–∞–Ω–∏–º–∏ —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.')
        clean_vars()


if split_method is None:
    info_msg('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Ä–æ–∑–±–∏—Ç—Ç—è –¥–∞–Ω–∏—Ö —É –±–æ–∫–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∑–ª—ñ–≤–∞ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.')
    clean_vars()
